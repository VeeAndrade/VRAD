{"version":3,"sources":["components/Form/Form.js","components/AreaCard/AreaCard.js","components/Areas/Areas.js","components/Listing/Listing.js","components/AreaListing/AreaListing.js","components/ListingsContainer/ListingsContainer.js","components/Greeting/Greeting.js","components/LoginHeading/LoginHeading.js","components/Error/Error.js","components/FavoriteListing/FavoriteListing.js","components/App/App.js","apiCalls.js","serviceWorker.js","index.js"],"names":["Form","handleChange","e","setState","target","name","value","updateUserInfo","user","purpose","validateUser","state","email","props","window","alert","className","type","placeholder","this","title","onChange","required","onClick","to","Component","propTypes","PropTypes","string","AreaCard","shortName","description","areaId","listings","src","process","alt","Areas","displayAreas","areas","map","area","about","id","key","areasData","array","Listing","matched","listing_id","toString","details","beds","baths","cost_per_night","address","street","zip","features","feature","addToFavorites","parseInt","event","favoriteId","userFavorites","length","fav","find","favorite","includes","index","indexOf","splice","removeFromFavorites","findIndexOfFavorite","AreaListing","listing","ListingsContainer","Greeting","LoginHeader","Error","errorMessage","FavoriteListing","favoriteCards","App","newFavorites","error","fetch","then","response","ok","json","areaPromises","Promise","all","resolvePromises","getListings","data","catch","areaValues","listingsObj","reduce","acc","values","Object","allListings","areaListings","getIndividualListings","push","exact","path","render","match","params","area_id","filteredListings","filter","matchedListing","bool","Boolean","location","hostname","router","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.136de543.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types'\nimport './Form.css'\n\n\nexport default class Form extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: '',\n      purpose: ''\n    }\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n   updateUserInfo = (user, purpose) => {\n    this.setState({ user })\n    this.setState({ purpose })\n  }\n\n  validateUser = e => {\n    if(!this.state.user || !this.state.purpose || !this.state.email) {\n      window.alert('You must fill out all fields')\n    } else {\n      this.props.updateUserInfo(this.state.user, this.state.purpose);\n    }\n  }\n\n  render() {\n    return (\n      <form className='user-input-form'>\n        <input\n          className='username-input'\n          type='text'\n          placeholder='Name'\n          value={this.state.title}\n          name='user'\n          onChange={this.handleChange}\n        />\n        <input\n          className = 'useremail-input'\n          type='email'\n          placeholder='Email'\n          name='email'\n          onChange={this.handleChange}\n          required\n        />\n        <section className='purpose-section'>\n        <label className='purpose-label'>Reason for trip: </label>\n        <select name='purpose' className='purpose-selection' onChange={this.handleChange}>\n          <option value=\"\">Select one--</option>\n          <option value='Vacation'>Vacation</option>\n          <option value='Business'>Business</option>\n          <option value='Other'>Other</option>\n        </select>\n        </section>\n        <Link className='continue-btn' onClick={this.validateUser} to={() => {\n          if (!this.state.user || !this.state.purpose || !this.state.email) {\n            return '/'\n          } else {\n            return '/areas'\n          }\n        }}>\n          Continue\n        </Link>\n      </form>\n    )\n  }\n}\n\nComponent.propTypes = {\n  user: PropTypes.string,\n  purpose: PropTypes.string\n}","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport './AreaCard.css'\n\nconst AreaCard = ({shortName, name, description, areaId, listings}) => {\n  return(\n    <section className='area-card-section'>\n      <h3 className='area-card-name'>{name}\n        <p className='area-card-shortName'>({shortName})</p>\n      </h3>\n      <img src={process.env.PUBLIC_URL + `/images/den-pic-${areaId}.jpg`} className='area-card-image' alt={`Pictures of a rental in ${shortName}`}/>\n      <section className='describe-sect'>\n        <aside className='area-card-description'>{description}</aside>\n        <Link className='view-listings-button' listings={listings} to={`/areas/${areaId}/listings`}>View Listings</Link>\n      </section>\n    </section>\n  )\n}\n\nAreaCard.propTypes = {\n  shortName: PropTypes.string,\n  name: PropTypes.string,\n  description: PropTypes.string,\n  areaId: PropTypes.number,\n  listings: PropTypes.array,\n}\n\nexport default AreaCard;\n","import React, { Component } from 'react';\nimport AreaCard from '../AreaCard/AreaCard';\nimport PropTypes from 'prop-types'\nimport './Areas.css'\n\nclass Areas extends Component {\n  constructor() {\n    super()\n    this.state = {\n      areas: ''}\n  }\n\n  componentDidMount() {\n    this.setState({areas: this.props.areasData})\n  }\n\n  displayAreas = () => {\n    return this.state.areas.map(area => {\n      return <AreaCard\n      shortName={area.shortName}\n      name={area.name}\n      description={area.about}\n      areaId={area.id}\n      key={area.id}\n      />\n    })\n  }\n\n  render() {\n    if(!this.state.areas) {\n      return <h1>Loading...</h1>\n    } else {\n      return(\n        <main className='main-areas'>\n          <section className='card-container'>\n            {this.displayAreas()}\n          </section>\n        </main>\n      )\n    }\n  }\n}\n\nComponent.propTypes = {\n  areas: PropTypes.array\n}\n\nexport default Areas;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Listing.css'\n\n\nconst Listing = (props) => {\n  const findIndexOfFavorite = (favoriteId) => {\n    if (!props.userFavorites.length) {\n      window.alert('You have no favorites')\n    } else {\n      let fav = props.userFavorites.find((favorite) => {\n        return favorite.listing_id === parseInt(favoriteId)\n      })\n      if (!props.userFavorites.includes(fav)) {\n        window.alert('You do not have that listing in your favorites')\n      } else {\n        let index = props.userFavorites.indexOf(fav)\n        props.userFavorites.splice(index, 1)\n        props.removeFromFavorites(props.userFavorites)\n      }\n    }\n  }\n\n  if(!props.matched){\n    return <h1>Loading...</h1>\n  } else {\n      let id = props.matched.listing_id.toString()\n    return (\n    <article className='listing-section-article'>\n      <h1 className='single-listing-heading'>{props.matched.name}</h1>\n      <section className='images-section'>\n        <img alt='area listing' className='listing-image' src={process.env.PUBLIC_URL + `/images/${id}_a.jpg`} />\n        <img alt='area listing' className='listing-image' src={process.env.PUBLIC_URL + `/images/${id}_b.jpg`} />\n        <img alt='area listing' className='listing-image' src={process.env.PUBLIC_URL + `/images/${id}_c.jpg`} />\n      </section>\n      <section className='listing-description-section'>\n        <section className='listing-paragraph-decription'>\n          <p>Great for entertaining: spacious, updated {props.matched.details.beds} bedroom, \n        {props.matched.details.baths} bathroom apartment in Lakeview, available May 1st. \n        Close to nightlife with private backyard. Cost Per Night: ${props.matched.details.cost_per_night}. \n        The building is pet-friendly with heat included. This property is managed by a responsible\n        landlord using Avail landlord software. Applicants are required to complete a rental application\n        and authorize a $45 credit and background check.</p>\n        </section>\n        <section className='short-description'>\n          <section className='p-tags'>\n            <p>Address: {props.matched.address.street}</p>\n            <p>Zip Code: {props.matched.address.zip}</p>\n            <p>Beds: {props.matched.details.beds}</p>\n            <p>Baths: {props.matched.details.baths}</p>\n            <p>Cost Per Night: ${props.matched.details.cost_per_night}</p>\n          </section>\n          <section className='unordered-list'>\n            <ul><p>This place includes:</p>\n            {props.matched.details.features.map(feature => {\n              return (<li key={feature}>{feature}</li>)\n            })}\n          </ul>\n          </section>\n        </section>\n        <section className='buttons-container'>\n          <button className='favorite-button' onClick={() => props.addToFavorites(props.matched)}>Favorite</button>\n          <button className='remove-from-favorites' name={parseInt(id)} onClick={(event) => findIndexOfFavorite(event.target.name)}>Remove</button>\n          </section>\n      </section>\n    </article>\n    )};\n  }\n\n\nexport default Listing;\n\nListing.propTypes = {\n  matched: PropTypes.object,\n  userFavorites: PropTypes.array,\n  removeFromFavorites: PropTypes.func,\n  addToFavorites: PropTypes.func\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types'\nimport './AreaListing.css'\n\nconst AreaListing = ({ listings, id }) => {\n  return listings.map(listing => {\n    return (\n      <article className='area-listing-section' key={listing.listing_id}>\n        <header className='area-listing-name'>{listing.name}</header>\n        <img alt='area listings' className='area-listing-image' src={process.env.PUBLIC_URL + `/images/${listing.listing_id}_a.jpg`} />\n        <button className='view-listings-link-button'>\n          <Link className='view-listing-link' to={ `/areas/${id}/listings/${listing.listing_id}` }>View This Listing</Link>\n        </button>\n      </article>\n    )\n  })\n};\n\nAreaListing.propTypes = {\n  listings: PropTypes.array,\n  id: PropTypes.string\n}\n\nexport default AreaListing;\n","import React from 'react';\nimport AreaListings from '../AreaListing/AreaListing'\nimport PropTypes from 'prop-types'\nimport '../ListingsContainer/ListingsContainer.css'\n\nconst ListingsContainer = ({listings, id}) => {\n  return (\n    <section className='area-listings-container'>\n      <AreaListings listings={listings} id={id}/>\n    </section>\n  )\n}\n\nListingsContainer.propTypes = {\n  listings: PropTypes.string,\n  id: PropTypes.string\n}\n\nexport default ListingsContainer;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types'\nimport './Greeting.css';\n\nconst Greeting = ({ user, purpose, userFavorites, updateUserInfo }) => {\n\n  const updateUser = () => {\n    let user = ''\n    let purpose = ''\n    updateUserInfo(user, purpose)\n  }\n\n  if(!user || !purpose) {\n    return ''\n  } else {\n    return(\n      <>\n      <header className='logged-in-header'>\n        <h2 className='welcome-user'>Welcome, {user}</h2>\n        <h1 className='logged-in-heading'>Denver Rentals</h1>\n        <section className='links-buttons'>\n          <NavLink className='favorites-nav-link' to='/favorites'>Favorites:{userFavorites.length}</NavLink>\n          <NavLink className='signout-btn' to='/' onClick={updateUser}>Signout</NavLink>\n        </section>\n      </header>\n      <article className='user-info'>\n        <p className='purpose'>We found the perfect {purpose} rentals for you!</p>\n      </article>\n      </>\n    )}\n  }\n\n  Greeting.propTypes = {\n    user: PropTypes.string,\n    purpose: PropTypes.string,\n    userFavorites: PropTypes.array\n  }\n\nexport default Greeting;\n","import React from 'react';\nimport './LoginHeading.css';\n\nconst LoginHeader = () => {\n  return (\n    <header className='App-header'>\n      <h1 className='App-heading'>Denver Rentals</h1>\n    </header>\n  )\n}\n\nexport default LoginHeader;","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Error = (errorMessage) => {\n  return (\n    <section>\n      <h1>There was an error: {errorMessage}</h1>\n    </section>\n  )\n}\n\nexport default Error\n\nError.propTypes = {\n  errorMessage: PropTypes.string\n}\n","import React from 'react';\nimport './FavoriteListing.css';\nimport AreaListing from '../AreaListing/AreaListing';\nimport PropTypes from 'prop-types'\n\nconst FavoriteListing = (props) => {\n  const findIndexOfFavorite = (favoriteId) => {\n    let fav = props.userFavorites.find((favorite) => {\n      return favorite.listing_id === parseInt(favoriteId)\n    })\n    let index = props.userFavorites.indexOf(fav)\n    props.userFavorites.splice(index, 1)\n    props.removeFromFavorites(props.userFavorites)\n  }\n\n  if(!props.userFavorites.length){\n    return <h1>You have no userFavorites</h1>\n  } else {\n    let favoriteCards = props.userFavorites.map(favorite => {\n      return (\n        <article className='fav-card'>\n        <h2 className='fav-heading'>{favorite.name}</h2>\n        <section className='fav-images-section'>\n          <img alt='area listing' className='fav-image' src={process.env.PUBLIC_URL + `/images/${favorite.listing_id}_a.jpg`} />\n        </section>\n        <button name={favorite.listing_id} className='remove-fav-btn' onClick={(event) => findIndexOfFavorite(event.target.name)}>Remove From Favorites</button>\n        </article>\n      )\n    })\n    return (\n      <section className='fav-section'>\n        {favoriteCards}\n      </section>\n    )\n  }\n}\n\nFavoriteListing.propTypes = {\n  userFavorites: PropTypes.array,\n  removeFromFavorites: PropTypes.func\n}\n\nexport default FavoriteListing;\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport './App.css';\nimport Form from '../Form/Form';\nimport Areas from '../Areas/Areas';\nimport Listing from '../Listing/Listing';\nimport ListingsContainer from '../ListingsContainer/ListingsContainer';\nimport Greeting from '../Greeting/Greeting';\nimport LoginHeading from '../LoginHeading/LoginHeading';\nimport Error from '../Error/Error';\nimport FavoriteListing from '../FavoriteListing/FavoriteListing';\nimport PropTypes from 'prop-types';\nimport { getAreas, getListings, resolvePromises, getIndividualListings } from '../../apiCalls';\n\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: '',\n      purpose: '',\n      areas: '',\n      listings: '',\n      error: false,\n      userFavorites: []\n    }\n  }\n\n  addToFavorites = (listing) => {\n    if(!this.state.userFavorites.includes(listing)) {\n      this.setState({ userFavorites: [...this.state.userFavorites, listing] })\n    }\n  }\n\n    componentDidMount() {\n    getAreas()\n      .then(areas => {\n        const areaPromises = areas.areas.map(area => {\n        return getListings(area)\n          .then(data => {\n            return {\n              shortName: area.area,\n              ...data\n            }\n          })\n          .catch(error => this.setState({error: error}))\n        })\n        resolvePromises(areaPromises)\n        .then(areaValues => {\n          const listingsObj = areaValues.reduce((acc, area) => {\n            acc[area.name] = area.listings\n            return acc\n          }, {})\n          this.setState({areas: areaValues, listings: listingsObj})\n          let values = Object.values(this.state.listings)\n          let allListings = []\n          let fetchedListings  = values.map(value => {\n            let individualListing = value.map(areaListings => {\n              getIndividualListings(areaListings)\n              .then(data => {\n                allListings.push(data)\n                this.setState({listings: allListings});\n              })\n            })\n          })\n        })\n      })\n    }\n\n    updateUserInfo = (user, purpose) => {\n      this.setState({ user })\n      this.setState({ purpose })\n    }\n\n    removeFromFavorites = (newFavorites) => {\n      this.setState({userFavorites: newFavorites})\n    }\n\n    render() {\n      if (this.state.error) {\n        return (\n          <Error errorMessage={this.state.error} />\n        )\n      } else if (!this.state.areas || !this.state.listings.length) {\n        return (\n          <h1>LOADING . . .</h1>\n          )\n        } else {\n    return (\n      <main className='App-main'>\n        {!this.state.user ? <LoginHeading /> : <Greeting user={this.state.user} purpose={this.state.purpose} userFavorites={this.state.userFavorites} updateUserInfo={this.updateUserInfo}/>}\n        <Route exact path='/' render={() => <Form updateUserInfo={this.updateUserInfo} />} />\n        <Route exact path='/areas' render={() => <Areas areasData={this.state.areas} />}/>\n        <Route exact path='/areas/:area_id/listings' render={({match}) => {\n          const areaId = match.params.area_id\n          const filteredListings = this.state.listings.filter(listing => {\n            return listing.area_id === parseInt(areaId)\n          })\n          return <ListingsContainer listings={filteredListings} id={areaId}/>\n          }} />\n        <Route exact path='/areas/:area_id/listings/:listing_id' render={({match}) => {\n          let matchedListing = this.state.listings.find(listing => parseInt(match.params.listing_id) === listing.listing_id)\n          return <Listing matched={matchedListing} userFavorites={this.state.userFavorites} removeFromFavorites={this.removeFromFavorites} addToFavorites={this.addToFavorites}/>\n          }\n        }  />\n        <Route exact path='/favorites' render={() => <FavoriteListing userFavorites={this.state.userFavorites} removeFromFavorites={this.removeFromFavorites} /> }/>\n      </main>\n    )};\n  }\n}\n\nComponent.propTypes = {\n  user: PropTypes.string,\n  purpose: PropTypes.string,\n  areas: PropTypes.array,\n  listings: PropTypes.array,\n  error: PropTypes.bool,\n  userFavorites: PropTypes.array\n}\n","export const getAreas = () => {\n  return fetch('http://localhost:3001/api/v1/areas')\n    .then(response => {\n      if (!response.ok) {\n        throw Error('Error getting areas')\n      }\n      return response.json()\n    })\n}\n\nexport const getListings = (area) => {\n  return fetch('http://localhost:3001' + area.details)\n    .then(response => {\n      if (!response.ok) {\n        throw Error('Error getting listings')\n      }\n      return response.json()\n    })\n}\n\nexport const resolvePromises = (areaPromises) => {\n  return Promise.all(areaPromises)\n}\n\nexport const getIndividualListings = (areaListings) => {\n  return fetch('http://localhost:3001' + areaListings)\n    .then(response => {\n      if (!response.ok) {\n        throw Error('Error getting that listing')\n      }\n      return response.json()\n    })\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nconst router = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(router, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}